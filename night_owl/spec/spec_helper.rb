require "rubygems"
require "headless"
require_relative '../lib'
# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
	config.include PageObject::PageFactory
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.before(:each) do
  	#start_headless_browser if ENVIRONMENT == 'HEADLESS'
  	start_test(example)
  end
  
  config.after(:each) do
  	console_errors = []
  	if @browser
  	  begin
  	  	all_logs = @browser.manage.logs.get :browser
  	  ensure	
  	    @browser.quit
  	  end
  	end    
  end

  def start_headless_browser

  end	

  def start_test(example)
  	unless example.metadata[:no_browser]
  	  @browser = setup_environment(:ff, example)
  	end	
  end	

  def setup_environment(environment, example)	
  	profile = get_browser_profile({})
  	case environment
  	when :ff
  		caps = Selenium::WebDriver::Remote::Capabilities.firefox(:firefox_profile => profile)
  		browser = get_driver(:desired_capabilities => caps)
  	when :headless
  		browser = get_driver(:browser => :firefox, :profile => profile)
  	else
  		raise "#{environment} is not valid, curently only ff and headless are supported"
  	end
  	return browser		
  end

  def get_driver(driver_opts={})
  	driver_options = {:browser => :remote, 
  	                  :url => "http://192.168.35.1:4444/wd/hub",
  	                  :desired_capabilities => :firefox}.merge(driver_opts)
  	browser = driver_options.delete(:browser)
  	if browser != :remote
  		driver_options.delete(:url)
  		
  		driver_options.delete(:desired_capabilities)
  	end                
  	client = Selenium::WebDriver::Remote::Http::Default.new
  	client.timeout = 50
  	driver_options.merge!({http_client: client})

  	driver=Selenium::WebDriver.for browser, driver_options
  	driver.manage.timeouts.implicit_wait = 3
  	return driver
  end	

  def get_browser_profile(opts={})
  	profile = Selenium::WebDriver::Firefox::Profile.new
    return profile
  end	
end
